// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in= instruction[15], out= Ainst);
    And(a= instruction[15], b= true, out= Cinst);

    And(a= instruction[5], b= Cinst, out= aluToA);
	Mux16(a= instruction, b= aluOut, sel= aluToA, out= outFirstMux);
    Or(a= Ainst, b= aluToA, out= loadAReg);
    ARegister(in= outFirstMux, load= loadAReg, out= outAReg, out[0..14]= addressM);
    Mux16(a= outAReg, b= inM, sel= instruction[12], out= outSecondMux);
    And(a= Cinst, b= instruction[4], out= loadDReg);
    DRegister(in= aluOut, load= loadDReg, out= outDreg);
    ALU(x= outDreg, y= outSecondMux, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= aluOut, zr= zrOut, ng= ngOut);
    Or16(a= aluOut, b= false, out= outM);

    And(a= instruction[3], b= Cinst, out= writeM);

    And(a= zrOut, b= instruction[1], out= JEQ);
    And(a= ngOut, b= instruction[2], out= JLT);
    Or(a= ngOut, b= zrOut, out= zrOrNg);
    Not(in= zrOrNg, out= posOut);
    And(a= posOut, b= instruction[0], out= JGT);
    Or(a= JEQ, b= JLT, out= JLE);
    Or(a= JLE, b= JGT, out= jumpy);
    And(a= jumpy, b= Cinst, out= jump);

    PC(in= outAReg, load= jump, inc= true, reset= reset, out[0..14]= pc);
    
}